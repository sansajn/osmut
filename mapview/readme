závislosti:

	libgtkmm-3.0-dev
	libmapnik-dev
	libosmium2-dev
	gcc-7.0 (c++17 support)
	libboost-all-dev (1.62)

* počítanie dlaždíc na gpu
* fake GPS modul (simulácia PGS modulu)
* kešuj dlaždice
* umozni zobrazit dáta zo satelitu
* neblokujúci render dlaždíc
* renderuj názvy (ulíc)
* integruj OSM polygon render do mapview
/* štýlovanie polygónou
|* renderuj rôzne polygóny rôzne
|* vlastný OSM render renderujúci polygóny
|X renderuj world boundaries ako shape-file a potom lokálne dáta s DB
|* renderuj aj cestnu sieť (dialnice)
|* renderuj s databáze
|X renderuj s osm fajlu
|* zobraz všetky ATM v prahe
|* umožni zobraziť body na mape
|* generuj niekoľko dlaždíc naraz (multithread)
|* renderuj nie len boundaries, ale aj mestá a zastavané oblasti
|* kešuj už vygenerované dlaždice
|* generuj dlaždice aj pomocou mapniku
|* sprav zo samplu widget
|* umožni zobraziť dlaždice uložené na disku 



* integruj OSM polygon render do mapview

level 0: vyrenderuje mapu do jednej dlaždice
level 1: vyrenderuje mapu do 2x2 dlaždíc
...
level N: vyrenderuje mapu do 2^Nx2^N dlaždíc

lenže na to aby som mohol mapu renderovať do dlaždíc, potrebujem dáta rozdeliť
tak, aby som vedel rýchlo získať všetky polygóny v dannej oblasti.


* štýlovanie polygónou

zatial iba farbu, ničo na spôsob key=value zoznamu na kazdom riadku

použijem takúto lua syntax


	building_color={120, 60, 98}
	{building={'residential', 'private', 'yes'}, color=building_color}

kde 

	building={'residential', 'private', 'yes'}

interpretujeme ako

	if building=='residential' || building=='private' || ...
		do something ...

definícia objektu reprezentujúceho triedu polygónu je takáto

	{color={R,G,B},
	KEY1={VALUE, ...},
	KEY2={VALUE, ...},
	-- ...
	KEYN={VALUE, ...}}

kde KEY1, KEY2 až KEYN interpretujeme ako

	if poly[KEY1]==VALUE and poly[KEY2]==VALUE and poly[KEYN]==VALUE
		do something ...




* renderuj rôzne polygóny rôzne

inou farbou, napr.

building=residential renderuj šedou #D9D0C9
leisure=park renderuj ako #C8FACC


* vlastný OSM render renderujúci polygóny

sample_osm_polygon.cpp

(?) ako transformovať vrcholy polygónu (gps súradnice) pred vykreslením ?

zistím bounding box a ten potom roztiahnem na celý obrázok


* renderuj world boundaries ako shape-file a potom lokálne dáta s DB

(?) dáta pre world boundaries ?

potrebujem aby boly používaly gmerc projekciu (EPSG:3857)

	+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over";

použijem world_boundaries-spherical balíček (používa sa pri rendere OSM máp) a
na teraz budem predpokladať, že je v požadovanej projekcii.

Tile pre 12 level trvá vyrenderovať 6s (boundaries a holesovice) a 14 level
10s, 15 level 14s.

(!) musím vytvorit utilitu, ktorá otestuje ako dlho trvá renderovanie dlaždíc
pre jednotlivé levely.

len boundaries:
 	 5 level = ~200ms
 	 8 level = ~270ms
	10 level = ~700ms
	11 level = ~1.8s
	12 level = ~6s
	13 level = ~6s
	14 level = ~9s

len holesovice:
	 5 level = ~120ms
	 8 level = ~500ms
	10 level = ~2s

na 13 levely pre boundaries sa stratia dáta.

!! renderovanie mapnik-om je pri vyžších leveloch strašne pomalé, jediný spôsob
ako ho použiť je nakŕmiť ho len malím množstvom dát.

(?) Ako dlho trvať vyrenderovať všetky dlaždice v porovnaní s renderom na jeden
krát ?



* renderuj aj cestnu sieť (dialnice)

render, ktorý bude čítať style, pozri

	sanple_holesovice_render.cpp


OSM highway popis

	https://wiki.openstreetmap.org/wiki/Key:highway

popis pre LineSymbolizer

	https://github.com/mapnik/mapnik/wiki/LineSymbolizer

pozri do štýlu 

	Style name="roads"

riadok 2648.

pozri styl

	data/holesovice_style.xml


!!! mapnik je príliš pomalý k real-time renderu. Ako mapu vyrenderujem sám ?

napr. pomocou agg

OSM dáta obsahujú polygóny, polygón je definovaný ako uzatvorena krivka (way),
napr.

	<way id="29120703">
		<nd ref="320363764"/>
		<nd ref="320363766"/>
		<nd ref="4750773430"/>
		<nd ref="4750773422"/>
		<nd ref="4750772014"/>
		<nd ref="4750773421"/>
		<nd ref="4750773429"/>
		<nd ref="320363764"/>
		<tag k="leisure" v="park"/>
	</way>

(?) ako tieto polygóny prečítam a detekujem programom ?

prvý a posledný uzol musia byť zhodné




* renderuj aj cestnu sieť (dialnice)

	https://github.com/openstreetmap/mapnik-stylesheets/blob/master/generate_tiles.py

odkaz na komplexný render script

	https://wiki.openstreetmap.org/wiki/Mapnik_Example

GPS pozícia na mape

	https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames


* renderuj s databáze
* renderuj s osm fajlu

podľa

	https://help.openstreetmap.org/questions/13250/what-is-the-correct-projection-i-should-use-with-mapnik

potrebujem OSM dáta, ktoré sú v

	WGS84 (EPSG 4326)

a renderovať ich chcem ako

	Mercator (EPSG 3857)

tzn. v projekcii používanú google mapami

(?) dáta vhodné k renderu ?

	MEGA/private/geospatial/holesovice.osm

(?) ako renderovať OSM dáta pomocou mapniku ?

jeden tutoriál tu

	https://wiki.openstreetmap.org/wiki/Mapnik/Rendering_OSM_XML_data_directly

ukážka komplexného renderu (nejede s mapnikom 2.0+)

	https://wiki.openstreetmap.org/wiki/Mapnik_Example

Aktuálny mapnik (master) neobsahuje osm input plugin. Bol odstránený, takže render musí prebiehať s databázy (napr. sqlite)

konverziu OSM dát do sqlite databázy realizujem príkazom

	$ ogr2ogr -f SQLite data.sqlite data.osm -dsco SPATIALITE=YES

napr.

	$ ogr2ogr -f SQLite holesovice.db holesovice.osm -dsco SPATIALITE=YES

vygenetovaná databáza obsahuje niekoľko tabuliek s geometriou

	lines (cesty a chodníky)
	multipolygons (oblasti  ako budovy, parky, atď. )
	points (poi-e)
	multilinestrings (cesty a chodníky)

takýmto spôsobom potom v c++ vytvorím layer

	// layers
	{
		parameters p;
		p["type"] = "sqlite";
		p["file"] = "data/holesovice.db";
		p["table"] = "multipolygons";
		p["encoding"] = "utf8";

		layer lyr{"layer_0"};
		lyr.set_datasource(datasource_cache::instance().create(p));
		lyr.add_style("polygons");
//		lyr.set_srs(srs_lcc);

		m.add_layer(lyr);
	}
	
(?) aké input plugini mapnik implementuje ?

csv
gdal
geojson
ogr
pgraster
postgis
raster
shape
sqtlite
topojson

popis pluginou a odkazy na ne

	https://github.com/mapnik/mapnik/wiki/PluginArchitecture


(?) ako do mapniku pridám vrstvu, ktorá sa odkazuje na vektor bodou ?

môžem použiť memory_datasource [Ukážka:

	// vytvor a napln datasource
	parameters params;
	shared_ptr<memory_datasource> ds = make_shared<memory_datasource>(params);

	context_ptr ctx = make_shared<context_type>();
	feature_ptr f = feature_factory::create(ctx, 1);
	geometry::geometry<double> geom;
	if (from_wkt(wkt_albert_pt, geom))
		f->set_geometry(move(geom));
	else
		throw logic_error{"unable to parse wkt geometry"};

	ds->push(f);

	// ...

	{  // poi layer
		layer lyr{"poi_layer"};
		lyr.set_datasource(ds);
		lyr.add_style("pois");
		m.add_layer(lyr);
	}

--- koniec ukážky].

mapnik::geometry::polygon<double> g;
ukážky

	https://github.com/mapnik/mapnik/blob/v3.0.x/test/unit/vertex_adapter/vertex_adapter.cpp


unit testy k datasource pluginom

	https://github.com/mapnik/mapnik/tree/v3.0.x/test/unit/datasource

memory datasource

	https://github.com/mapnik/mapnik/blob/v3.0.x/test/unit/datasource/memory.cpp


(?) Ako použijem mapnik::feature ?

//expressions_test.cpp
template <typename Properties>
mapnik::feature_ptr make_test_feature(mapnik::value_integer id, std::string const& wkt, Properties const& prop)
{
    auto ctx = std::make_shared<mapnik::context_type>();
    mapnik::feature_ptr feature(mapnik::feature_factory::create(ctx, id));
    mapnik::geometry::geometry<double> geom;
    if (mapnik::from_wkt(wkt, geom))
    {
        feature->set_geometry(std::move(geom));
    }

    for (auto const& kv : prop)
    {
        feature->put_new(kv.first, kv.second);
    }
    return feature;
}


(?) WKT ?

	https://en.wikipedia.org/wiki/Well-known_text


(?) čo je mapnik-vector-tile ?

	https://github.com/mapbox/mapnik-vector-tile



(?) pozícia GPS na mape ?

	https://help.openstreetmap.org/questions/2687/coordinates-to-pixels-based-on-zoom



* (2018.01.06) správna transformácia/projekcia pri renderovaní pomocou mapnik-u

Akú transformáciu mám použiť (akú používa OSM) ?

Spherical Mercator (EPSG 3857)

	http://openstreetmapdata.com/info/projections

v qgise to je

WGS84/Pseudo Mercator
+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs

zistil som zo stránky

	https://epsg.io/3857


(?) akú projekciu je potrebné nastaviť do mapniku, aby sedela s dlaždicami stiahnutými s OSM ?

mapnik::Map treba vytvoriť s projekciou

	Map m{size, size, "+init=epsg:3857"};

hmmm, predchadzajúce nejede, ale je to to isté ako

	Map m{size, size, MAPNIK_GMERC_PROJ};


!! mapnik obsahuje funkciu

static inline bool lonlat2merc(double * x, double * y , int point_count)

v well_known_srs.hpp



* (2017.12.28) zobraz všetky ATM v prahe

zobrazovať budem s osm fajlu a k jeho parsovaniu použijem osmium


* umožni zobraziť body na mape

zoznam bodou uložený v lua tabuľke, takto

{  -- lat, lon
	{123.45, 12.34},
	{}
}

dáta môžem umiestniť do quad-tree (reprezentujúceho svet) a odtial získať zoznam
vyditeľných bodou.

potrebujem tiež vrstvy

(?) Ako na transformáciu geo pozície (wgs84) na súradnice okna ?

najjednoduchšia metóda je lineárna fransformacia

napr. bod p=(50.088182, 14.420210) na súradnice mapy transformujem nasledovne: mapa nech reprezentuje povrch zeme od -180 až 180 stupňou šírky a -90 až 90 stupňou výšky, potom p leží v relatívnej vzdialenosti

	r = ((p_lat + 90)/180, (p_lon + 180)/360) 
	r = (p_lat/180 + 1/2, p_lon/360 + 1/2)

Nech je mapa dlhá M a široká N bodou, potom bod p bude mať na mape takéto
súradnice

	s = ((p_lat/180+1/2)*M, (p_lon/360+1/2)*N)

tzn. napr. nech M = N = 2^6*256 = 1538, potom

	s = (1196.9756884, 830.6063416)

\note predchadzajúce platí asi iba v prípade, že používam latlon projekciu (teda unpojected dáta), ale nemám to vôbec overené





(?) akú mapovú projekciu používam ?

mapová projekcia je funkcia, ktorá transformuje bod na povrchu guľe, ale iného
sphereoidu do roviny

	f(lat, lon) -> x,y

ak mám dáta s GPS (lat,lon), tak potom tie používajú WGS84 (nie je to projekcia, ale model zeme)

 WGS84, that's the system that the GPS satellite system uses internally

	http://spatialreference.org/ref/epsg/wgs-84/


použi toto 

	map.zoom_to_box(mapnik.Box2d(-180, -90, +180, +90))  

aby som si bol istý, že mapa sa renderuje od -180, -90 po 180, 90

pg. 699 (Erik Westra)

mapová projekcia s knihy je

	 srs="+proj=latlong +datum=WGS84"

mapnik defaultne používa

	static const std::string MAPNIK_LONGLAT_PROJ = 
		"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs";

tzn. žiadnu projekciu (alebo aj priamu)




(?) ako zobrazím GPS dáta na OSM mape ?

gps dáta sú unprojected lat,lon súradnice na wgs84 spheroid tzn. potrebujem použiť merkátor projekciu


WGS84 (EPSG 4326)
Mercator (EPSG 3857)

	http://openstreetmapdata.com/info/projections

Mercator (EPSG 3857)

Most tiled web maps (such as the standard OSM maps and Google Maps) use this Mercator projection.

The map area of such maps is a square with x and y coordiates both between -20,037,508.34 and 20,037,508.34 meters. As a result data north of about 85.1° and south of about -85.1° latitude can not be shown and has been cut off.

The correct EPSG code for this data is 3857 and this is what the data files show. Before this code was allocated other codes such as 900913 were used. If your software does not understand the 3857 code you might need to upgrade. See this page for all the details.

This is the right choice for you if you are creating tiled web maps.

https://alastaira.wordpress.com/2011/01/23/the-google-maps-bing-maps-spherical-mercator-projection/




* generuj niekoľko dlaždíc naraz (multithread)

zdá sa že mapnik::Map nie je thread safe (stav k 2015)

	1) Use and re-use available mapnik.Map objects in rendering threads
	2) No one mapnik.Map object will be in use in more than one thread at any time

https://github.com/mapnik/mapnik-support/issues/57

treba pre každý thread vytvoriť/použiť vlastný mapnik::map objekt. Ako
management táskou použijem async a future s std.


* renderuj nie len boundaries, ale aj mestá a zastavané oblasti

na zoznam miest môžem použiť napr. 'places.shp' a na zastavané oblasti môžem
napr. použiť 'builtup_area.shp' s archívu 'world_boundaries-spherical.tgz'

	http://planet.openstreetmap.org/historical-shapefiles/world_boundaries-spherical.tgz

Je nutné, aby všetky shp súbory maly rovnakú projekciu (treba skonvertovať
napr. v q-gise). Na konverziu takto, otvor shapefile, ostatene do otvoreneho
pridaj akú vrstvy Layer > Add Layer > Add Vector Layer. Potom pravým tlačítkom
na každu vrstvu a vyber Save As a v okne zvol CRS (Coordinaate Transformation
System).

(?) čo obsahuje places shapefile ?

jeden layer v ktorom je 251 feature-ov, každý feature vypadá takto

	feature_N: geometry=point, fields=3
		 geometry: POINT (74.5662078857422 46.329345703125)
		 id(int64):250
		 place_name(string):Lake Balkhash
		 end_id(int64):250

(?) čo obsahuje builtup_area shapefile ?

jednu vrstvu (layer) v ktorej je 36432 feature-ov, každý feature vypadá takto

  feature_0: geometry=polygon, fields=5
    geometry: POLYGON ((-19937199.1812703 9926098.36547747,-19936392.3459717 9925014.77013953,-19936394.0445724 9925012.65803309,-19936918.9121666 9924091.84083544,-19940616.765735 9923557.56941947,-19940575.9993199 9925988.5196496,-19940173.4309709 9926244.12512484,-19939371.6914742 9926049.77960846,-19938935.1511127 9925806.85536404,-19937199.1812703 9926098.36547747))
    id(int64):1
    f_code(string):AL020
    nam(string):EGVEKINOT
    tile_id(int32):1
    fac_id(int64):2


!!! nejede to, lebo dáta majú inu projekciu (world je uplne maly a nejde ho vydieť)


* generuj dlaždice pomocou mapniku

Chcem zachovať súčastný stav, tzn. mapview vie zobrazovať aj dlaždice uložené v
adresáry a zároveň chcem aby bolo možné zobrazovať aj dlaždice generované
pomocou mapniku.

