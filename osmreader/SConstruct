# Pre skompilovanie release verzie zadaj prikaz '$ scons mode=release'.
use_clang = False

env = Environment()

build_mode = ARGUMENTS.get('mode', 'debug')

if build_mode == 'debug' and use_clang:
	env['CC'] = 'clang'
	env['CXX'] = 'clang++'

common_ccflags = '-std=c++11 '
release_ccflags = common_ccflags + '-O3 -DRELEASE '
debug_ccflags = common_ccflags + '-g -O0 -DDEBUG '


if build_mode == 'debug':
	ccflags = debug_ccflags
else:
	ccflags = release_ccflags

env.ParseConfig('xml2-config --cflags --libs')

print '+++Compiling in ' + build_mode + ' mode+++'

# common objects

common_srcs = Split('''
	reader_impl.cpp
''')

common_objs = env.Object(common_srcs, CCFLAGS=ccflags)


# osmreader (osm-range sample)

osmreder_srcs = Split('''
	osmreader.cpp
''')

env.Program(
	'osmreader', 
	osmreder_srcs + common_objs,
	CCFLAGS=ccflags
)

# waytypes

waytypes_srcs = Split('''
	waytypes.cpp
''')

env.Program(
	'waytypes', 
	waytypes_srcs + common_objs,
	CCFLAGS=ccflags
)

# extract way

extractway_srcs = Split('''
	extractway.cpp
''')

env.Program(
	'extractway',
	extractway_srcs + common_objs,
	CCFLAGS=ccflags
)

# list ways (listing osm ways)

listways_srcs = Split('''
	listways.cpp
''')

env.Program(
	'listways',
	listways_srcs + common_objs,
	CCFLAGS=ccflags
)

# filter (generates new filtered osm)

osmfilter_srcs = Split('''
	osmfilter.cpp
''')

env.Append(LIBS='boost_regex')

env.Program(
	'osmfilter',
	osmfilter_srcs + common_objs,
	CCFLAGS=ccflags
)

